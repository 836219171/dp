package com.bm.dp.config;

import org.apache.ibatis.session.LocalCacheScope;
import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;

import javax.sql.DataSource;

/**
 * @author xiao liang
 * @version V1.0
 * @Package com.bm.dp.config
 * @Title: MyBatisConfig1
 * @Description: TODO
 * @date 2018/9/25 9:28
 */
@Configuration
@MapperScan(basePackages = { "com.bm.dp.dao" }, sqlSessionFactoryRef = "sqlSessionFactory1")
public class MyBatisConfig1 {
    /**
     * DataSource
     */
    @Autowired
    @Qualifier("db1")
    private DataSource ds1;

    /**
     * MAPPER_LOCATION
     */
    static final String MAPPER_LOCATION = "classpath:com/bm/dp/dao/*.xml";

    /**
     * Title: sqlSessionFactory1
     * Description: 配置sqlSessionFactory
     * @return
     * @throws Exception
     * SqlSessionFactory
     */
    @Bean
    public SqlSessionFactory sqlSessionFactory1() throws Exception {
        SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
        factoryBean.setDataSource(ds1);
        org.apache.ibatis.session.Configuration configuration = new org.apache.ibatis.session.Configuration();
        configuration.setLocalCacheScope(LocalCacheScope.SESSION);
        configuration.setMapUnderscoreToCamelCase(true);
        factoryBean.setConfiguration(configuration);
        factoryBean.setMapperLocations(
                new PathMatchingResourcePatternResolver().getResources(MyBatisConfig1.MAPPER_LOCATION));
        factoryBean.setConfiguration(configuration);

        return factoryBean.getObject();
    }

    /**
     * Title: sqlSessionTemplate1
     * Description: 配置SqlSessionTemplate
     * @return
     * @throws Exception
     * SqlSessionTemplate
     */
    @Bean
    public SqlSessionTemplate sqlSessionTemplate1() throws Exception {
        // 使用上面配置的Factory

        SqlSessionTemplate template = new SqlSessionTemplate(sqlSessionFactory1());
        return template;
    }


}